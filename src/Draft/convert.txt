import { DFA } from "./DFA";
import { FA } from "./FA";

export class NFA extends FA {
  constructor(states, alphabet, transitions, startState, finalState) {
    super();
    this.states = new Set(states);
    this.alphabet = new Set(alphabet);
    this.transitions = transitions || {};
    this.startState = startState;
    this.finalState = new Set(finalState);
  }

  // Helper function to compute epsilon closure of a set of states
  getEpsilonClosure(states) {
    const closure = new Set(states);
    const stack = [...states];

    while (stack.length > 0) {
      const currentState = stack.pop();
      const epsilonTransitions = this.transitions[currentState]?.["ε"] || [];
      for (const nextState of epsilonTransitions) {
        if (!closure.has(nextState)) {
          closure.add(nextState);
          stack.push(nextState);
        }
      }
    }

    return closure;
  }

  // Main conversion function from NFA to DFA
  convertToDFA() {
    const newStates = [];
    const newTransitions = {};
    const stateMap = {};
    let stateCounter = 0;
    const unprocessedStates = [
      Array.from(this.getEpsilonClosure([this.startState])),
    ];
    const alphabet = Array.from(this.alphabet).filter(
      (symbol) => symbol !== "ε"
    );

    // Define the dead state name and initialize its transition
    const deadState = `q${this.states.size}`;
    stateMap[unprocessedStates[0].join(",")] = stateCounter++;
    newStates.push(unprocessedStates[0]);

    // Add dead state to the set of states and stateMap
    stateMap[deadState] = stateCounter++;
    newStates.push([deadState]);

    while (unprocessedStates.length > 0) {
      const currentState = unprocessedStates.pop();
      const currentStateKey = currentState.join(",");
      newTransitions[stateMap[currentStateKey]] = {};

      // Process transitions for each symbol in the alphabet
      alphabet.forEach((symbol) => {
        let nextState = new Set();
        currentState.forEach((nfaState) => {
          const transitions = this.transitions[nfaState]?.[symbol] || [];
          transitions.forEach((nextStateNFA) => {
            nextState = new Set([
              ...nextState,
              ...Array.from(this.getEpsilonClosure([nextStateNFA])),
            ]);
          });
        });

        // Determine the key for the next state in the DFA
        if (nextState.size > 0) {
          const nextStateArray = Array.from(nextState);
          const nextStateKey = nextStateArray.join(",");
          if (!(nextStateKey in stateMap)) {
            stateMap[nextStateKey] = stateCounter++;
            newStates.push(nextStateArray);
            unprocessedStates.push(nextStateArray);
          }
          newTransitions[stateMap[currentStateKey]][symbol] =
            stateMap[nextStateKey];
        } else {
          // If nextState is empty, transition to the dead state
          newTransitions[stateMap[currentStateKey]][symbol] = deadState;
        }
      });

      // Ensure the dead state transitions on all symbols to itself
      newTransitions[stateMap[deadState]] = {};
      alphabet.forEach((symbol) => {
        newTransitions[stateMap[deadState]][symbol] = stateMap[deadState];
      });
    }

    // Sort newStates lexicographically
    newStates.sort((a, b) => {
      const stateStrA = a.sort().join("");
      const stateStrB = b.sort().join("");
      return stateStrA.localeCompare(stateStrB);
    });

    console.log("newStates:", newStates);
    console.log("State Map : ", stateMap);
    console.log("newTransitions:", newTransitions);

    const newDFA = new DFA();
    // Add states to the DFA instance
    newStates.forEach((stateArray, index) => {
      newDFA.addState(`q${index}`);
      if (stateArray.some((state) => this.finalState.has(state))) {
        newDFA.setFinalState(`q${index}`);
        console.log("Final State : ", this.finalState);
      }
    });

    // Add Alphabets
    alphabet.forEach((syn) => {
      newDFA.addAlphabet(syn);
    });

    // Set start state of the DFA instance
    const startStateKey = Array.from(
      this.getEpsilonClosure([this.startState])
    ).join(",");
    const startStateIndex = stateMap[startStateKey];
    newDFA.setStartState(`q${startStateIndex}`);
    console.log("Start State :", this.startState);
    console.log("State Map : ", stateMap);

    // Add transitions
    Object.keys(newTransitions).forEach((stateKey) => {
      const stateIndex = parseInt(stateKey);
      Object.keys(newTransitions[stateKey]).forEach((symbol) => {
        const nextStateKey = newTransitions[stateKey][symbol];
        let nextStateIndex;

        if (typeof nextStateKey === "string") {
          nextStateIndex = stateMap[nextStateKey];
        } else {
          nextStateIndex = nextStateKey;
        }

        // Check if nextStateIndex is undefined
        if (nextStateIndex === undefined) {
          // Transition to the dead state
          nextStateIndex = stateMap[deadState];
        }

        // Add transition to DFA
        newDFA.addTransition(`q${stateIndex}`, symbol, `q${nextStateIndex}`);
      });
    });
    return newDFA;
  }
}
