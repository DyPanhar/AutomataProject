// Minimize Part

  // Get Reachable States
  getReachableStates(initialState) {
    const reachable = new Set([initialState]);
    const stack = [initialState];

    while (stack.length > 0) {
      const state = stack.pop();
      for (const symbol of this.alphabet) {
        const nextState = this.transitions[state]?.[symbol];
        if (nextState && !reachable.has(nextState)) {
          reachable.add(nextState);
          stack.push(nextState);
        }
      }
    }

    return reachable;
  }

  partitionStates(reachableStates) {
    let partitions = [
      new Set(this.finalState),
      new Set(
        [...reachableStates].filter((state) => !this.finalState.has(state))
      ),
    ];

    let changed = true;
    while (changed) {
      changed = false;
      const newPartitions = [];

      for (const partition of partitions) {
        const blocks = this.splitPartition(partition, partitions);
        newPartitions.push(...blocks);
        if (blocks.length > 1) {
          changed = true;
        }
      }
      partitions = newPartitions;
    }

    return partitions;
  }

  splitPartition(partition, partitions) {
    const blocks = {};
    for (const state of partition) {
      const key = [...this.alphabet]
        .map((symbol) => {
          const nextState = this.transitions[state]?.[symbol];
          return partitions.findIndex((part) => part.has(nextState));
        })
        .join(",");
      if (!blocks[key]) {
        blocks[key] = new Set();
      }
      blocks[key].add(state);
    }
    return Object.values(blocks);
  }

  constructMinimizedDFA(partitions) {
    const newDFA = new DFA();
    const stateMap = {};

    partitions.forEach((partition, index) => {
      const representative = [...partition][0];
      const newState = `q${index}`;
      stateMap[representative] = newState;
      newDFA.addState(newState);
      if (this.finalState.has(representative)) {
        newDFA.setFinalState(newState);
      }
      if (this.startState === representative) {
        newDFA.setStartState(newState);
      }
    });

    partitions.forEach((partition) => {
      const representative = [...partition][0];
      const newState = stateMap[representative];
      this.alphabet.forEach((symbol) => {
        const nextState = this.transitions[representative]?.[symbol];
        if (nextState !== undefined) {
          newDFA.addTransition(newState, symbol, stateMap[nextState]);
        }
      });
    });

    return newDFA;
  }

  minimize() {
    const reachableStates = this.getReachableStates(this.startState);
    const partitions = this.partitionStates(reachableStates);
    return this.constructMinimizedDFA(partitions);
  }
//

 // ALL for dfa class

// import { FA } from "./FA";

// export class DFA extends FA {
//   constructor() {
//     super();
//     this.transitions = {};
//   }

//   addTransition(currentState, inputSymbol, nextState) {
//     if (
//       this.states.has(currentState) &&
//       this.states.has(nextState) &&
//       this.alphabet.has(inputSymbol)
//     ) {
//       if (!this.transitions[currentState]) {
//         this.transitions[currentState] = {};
//       }
//       this.transitions[currentState][inputSymbol] = nextState;
//     } else {
//       throw new Error(
//         `Invalid transition: ${currentState} --(${inputSymbol})--> ${nextState}`
//       );
//     }
//   }

//   processInput(input) {
//     let currentState = this.startState;
//     for (const symbol of input) {
//       if (
//         this.transitions[currentState] &&
//         this.transitions[currentState][symbol]
//       ) {
//         currentState = this.transitions[currentState][symbol];
//       } else {
//         return false;
//       }
//     }
//     return this.finalState.has(currentState);
//   }
// }

{∅}


const renderGraphviz = (automaton, type) => {
    if (!automaton) return "";

    const dotString = `
      digraph {
        rankdir=LR;
        node [shape = point]; entry;
        node [shape = circle];
  
        entry -> "${automaton.startState}";
  
        ${[...automaton.states]
          .map(
            (state) =>
              `"${state}" [shape=${
                automaton.finalState.has(state) ? "doublecircle" : "circle"
              }]`
          )
          .join("\n")}
        ${Object.entries(automaton.transitions)
          .map(([currentState, transitions]) =>
            Object.entries(transitions)
              .map(([inputSymbol, nextStates]) =>
                // Check if nextStates is an object and convert to array if necessary
                Array.isArray(nextStates)
                  ? nextStates
                      .map(
                        (nextState) =>
                          `"${currentState}" -> "${nextState}" [label="${inputSymbol}"]`
                      )
                      .join("\n")
                  : Array.from(nextStates)
                      .map(
                        (nextState) =>
                          `"${currentState}" -> "${nextState}" [label="${inputSymbol}"]`
                      )
                      .join("\n")
              )
              .join("\n")
          )
          .join("\n")}
      }
    `;
    console.log(dotString); // Output DOT string to console for debugging
    return dotString;
  };
// NFA class

import { FA } from "./FA";

export class NFA extends FA {
  getEpsilonClosure(states) {
    const stack = [...states];
    const closure = new Set(states);
    while (stack.length > 0) {
      const state = stack.pop();
      const epsilonTransitions = this.transitions[state]?.["ε"] || [];
      for (const nextState of epsilonTransitions) {
        if (!closure.has(nextState)) {
          closure.add(nextState);
          stack.push(nextState);
        }
      }
    }
    return closure;
  }

  processInput(input) {
    let currentStates = this.getEpsilonClosure([this.startState]);
    for (const symbol of input) {
      const nextStates = new Set();
      for (const state of currentStates) {
        const symbolTransitions = this.transitions[state]?.[symbol] || [];
        for (const nextState of symbolTransitions) {
          nextStates.add(nextState);
        }
      }
      currentStates = this.getEpsilonClosure(nextStates);
    }
    for (const state of currentStates) {
      if (this.finalState.has(state)) {
        return true;
      }
    }
    return false;
  }
}

// convert



import React, { useState, useEffect } from "react";
import { useLocation } from "react-router-dom";
import { NFA } from "./FA/NFA";
import { Graphviz } from "graphviz-react";

const Convert = () => {
  const location = useLocation();
  const data = location.state;
  const [originalNFA, setOriginalNFA] = useState(null);
  const [convertedDFA, setConvertedDFA] = useState(null);

  useEffect(() => {
    if (data) {
      const newAutomaton = new NFA();
      newAutomaton.states = new Set(data.states);
      newAutomaton.alphabet = new Set(data.alphabet);
      newAutomaton.transitions = data.transitions;
      newAutomaton.startState = data.startState;
      newAutomaton.finalState = new Set(data.finalState);

      setOriginalNFA(newAutomaton);

      try {
        const newDFA = newAutomaton.convertToDFA();
        console.log("After convert:", newDFA);
        setConvertedDFA(newDFA);
      } catch (error) {
        console.error("Error during conversion: ", error);
      }
    }
  }, [data]);

  const renderGraphvizNFA = (automaton, type) => {
    if (!automaton) return "";

    const dotString = `
      digraph {
        rankdir=LR;
        node [shape = point]; entry;
        node [shape = circle];
  
        entry -> "${automaton.startState}";
  
        ${[...automaton.states]
          .map(
            (state) =>
              `"${state}" [shape=${
                automaton.finalState.has(state) ? "doublecircle" : "circle"
              }]`
          )
          .join("\n")}
        ${Object.entries(automaton.transitions)
          .map(([currentState, transitions]) =>
            Object.entries(transitions)
              .map(([inputSymbol, nextStates]) =>
                // Check if nextStates is an object and convert to array if necessary
                Array.isArray(nextStates)
                  ? nextStates
                      .map(
                        (nextState) =>
                          `"${currentState}" -> "${nextState}" [label="${inputSymbol}"]`
                      )
                      .join("\n")
                  : Array.from(nextStates)
                      .map(
                        (nextState) =>
                          `"${currentState}" -> "${nextState}" [label="${inputSymbol}"]`
                      )
                      .join("\n")
              )
              .join("\n")
          )
          .join("\n")}
      }
    `;
    // console.log(dotString); // Output DOT string to console for debugging
    return dotString;
  };

  return (
    <div className="container-fluid">
      {/* Original NFA */}
      <div>
        <h1 className="text-center" style={{ margin: "0" }}>
          Original NFA
          {console.log("NFA : ", originalNFA)}
        </h1>
        <div className="container d-flex justify-content-center align-items-center gap-4">
          <div className="container">
            {originalNFA && (
              <table className="table table-bordered table-striped table-hover">
                <thead>
                  <tr>
                    <th></th>
                    {[...originalNFA.alphabet].map((symbol, index) => (
                      <th key={index}>{symbol}</th>
                    ))}
                  </tr>
                </thead>
                <tbody>
                  {[...originalNFA.states].map((state, index) => (
                    <tr key={index}>
                      <td>{state}</td>
                      {[...originalNFA.alphabet].map((symbol, symbolIndex) => (
                        <td key={symbolIndex}>
                          {originalNFA.transitions[state] &&
                          originalNFA.transitions[state][symbol]
                            ? Array.isArray(
                                originalNFA.transitions[state][symbol]
                              )
                              ? originalNFA.transitions[state][symbol].join(
                                  ", "
                                )
                              : originalNFA.transitions[state][symbol]
                            : "{∅}"}
                        </td>
                      ))}
                    </tr>
                  ))}
                </tbody>
              </table>
            )}
          </div>
          {originalNFA && (
            <Graphviz dot={renderGraphvizNFA(originalNFA, "NFA")} />
          )}
        </div>
      </div>

      {/* Converted DFA */}
      <div>
        <h1 className="text-center" style={{ margin: "0" }}>
          Converted DFA
        </h1>
        <div className="container d-flex justify-content-center align-items-center gap-4">
          <div className="container">
            {convertedDFA && (
              <table className="table table-bordered table-striped table-hover">
                <thead>
                  <tr>
                    <th></th>
                    {[...convertedDFA.alphabet].map((symbol, index) => (
                      <th key={index}>{symbol}</th>
                    ))}
                  </tr>
                </thead>
                <tbody>
                  {[...convertedDFA.states].map((state, index) => (
                    <tr key={index}>
                      <td>{state}</td>
                      {[...convertedDFA.alphabet].map((symbol, symbolIndex) => (
                        <td key={symbolIndex}>
                          {convertedDFA.transitions[state] &&
                          convertedDFA.transitions[state][symbol]
                            ? convertedDFA.transitions[state][symbol]
                            : "{∅}"}
                        </td>
                      ))}
                    </tr>
                  ))}
                </tbody>
              </table>
            )}
          </div>
          {/* {convertedDFA && (
            // <Graphviz dot={renderGraphviz(convertedDFA, "DFA")} />
          )} */}
        </div>
      </div>
    </div>
  );
};

export default Convert;
